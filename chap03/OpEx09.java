package chap03;
/*
 * 비트이동연산자(shift 연산자)
 * 	>> n : n만큼 오른쪽으로 비트를 이동. 왼쪽 비트는 부호비트를 채움.
 * 	<< n : n만큼 왼쪽으로 비트 이동. 오른쪽 비트는 0으로 채움.
 * 	>>> n : n만큼 오른쪽으로 비트 이동. 왼쪽 비트는 0으로 채움.
 */
public class OpEx09 {

	public static void main(String[] args) {
		System.out.println("8 >> 2 : " + (8 >> 2));
		/*
		 * 8 : 00001000
		 * ============
		 * >>2 : 왼쪽으로 두칸 밀기 __00001000
		 * 		두칸만큼 넘어간 00은 버리고 앞에 __두칸은 부호 비트인 앞에 두비트 00을 넣어준다.
		 * 		00 000010 => 2가됨.
		 */
		System.out.println("8 << 2 : " + (8 << 2));
		/*
		 * 8 : 00001000
		 * ============
		 * << 2 : 00100000 => 32
		 */
		System.out.println("8 >>> 2 : " + (8 >>> 2));
		/*
		 * 8 : 00001000
		 * =============
		 * >>>2 : 00000010 => 2
		 */
		System.out.println("-8 >> 2 : " + (-8 >> 2));
		/* 8 : 00001000
		 * -8 : 전부 반대로 바꾸기 11110111 => +1 해줌. 오른쪽에서 부터 1넣어주고 안들어가면 0으로 바꾸고 비어있는 0에 1이 들어가면서 멈춤
		 * 11111000이 됨.
		 * -8 : 11111000
		 * =============
		 * <<2 : 11111110 => -32
		 */
		System.out.println("-8 << 2 : " + (-8 << 2));
		/*
		 * <<2 : 11100000 => -32
		 */
		System.out.println("-8 >>> 2 : " + (-8 >>> 2));
		/*
		 * -8 : 11111000
		 * ==============
		 * >>>2 : 00111 ... 1111 ...... => 양수로 변경. 부호비트가 0으로 변경.
		 */
	}

}
