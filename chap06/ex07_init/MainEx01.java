package ex07_init;
/*
 * 초기화블럭
 * static 초기화블럭
 * 	- 클래스 변수의 초기화 담당
 *  - 클래스 정보 로드시 한번만 실행됨
 *  - main 메서드 실행 전에 먼저 실행함.
 * 인스턴스 초기화블럭
 *  - 인스턴스 변수의 초기화 담당. 생성자와 기능이 겹침.
 *  - 객체화시 생성자 호출전에 실행됨.
 */
public class MainEx01 {
	static int cv;
	int iv;
	MainEx01(){
		System.out.println("5.생성자 호출됨");
	}
	static { //class변수를 초기화 할 수 있어서 종종사용함.
		cv = (int)(Math.random() * 100);
		System.out.println("1. static 초기화 블럭 실행:cv=" + cv);
	}
	{ //거의 안씀.
		iv = (int)(Math.random() * 100);
		System.out.println("4. 인스턴스 초기화 블럭 실행:iv=" + iv);
	}
	public static void main(String[] args) {
		System.out.println("2. main 메서드 시작");
		System.out.println("3.main 메서드에서 init1 객체 생성");
		MainEx01 init1 = new MainEx01();
		System.out.println("3.main 메서드에서 init2 객체 생성");
		MainEx01 init2 = new MainEx01();
	}
}
/*
 * <추상화>
 * 	-클래스 생성의 과정. 추상화 과정의 결과가 클래스임.
 * 	 클래스란. 사용자 정의 자료형.
 * 
 * <클래스>
 * 	필드(변수, 명사적특징, 속성)
 * 		클래스변수(static) : 클래스 정보 로드시 메모리를 할당. 모든 객체의 공유변수.
 * 		인스턴스변수 : 객체화시 메모리 할당. 객체별로 다른 메모리를 할당받음.
 * 	멤버메서드(함수, 동사적 특징, 기능)
 * 		클래스메서드(static): 클래스 정보 로드시 실행 준비 완료
 * 		인스턴스메서드: 객체화시 실행 준비 완료
 * 	
 * 	클래스멤버: 클래스변수 + 클래스메서드
 * 	인스턴스멤버: 인스턴스변수 + 인스턴스메서드
 * 		=> 클래스멤버에서 인스턴스멤버 직접 호출불가 => 객체화필요
 * 	
 * 	생성자: 객체화시 호출되는 메서드. 인스턴스 멤버임.
 * 			생성자의 이름은 클래스명과 같음(중요). 리턴타입이 없다.
 * 			생성자도 오버로딩이 가능함.=> 하나의 클래스에 여러개의 생성자가 존재 가능.
 * 			생성자 없는 객체화 불가.
 * 	오버로딩: 동일 클래스내에 이름이 같은 메서드가 여러개 존재 가능
 * 			단 매개변수가 달라야한다.
 * 			메서드의 다형성이라고도 함.
 * 	this: 자기참조변수. 인스턴스 메서드내에서 지역변수로 자동 선언됨. 자기 참조값을 저장
 * 	this(): 생성자. 같은 클래스의 다른 생성자 호출시 사용. 첫 줄에 사용해야 함.
 * 
 * 	초기화블럭:
 * 		static 초기화블럭, 인스턴스 초기화블럭
 * ==========================================================================
 * <상속>: extends 예약어 사용
 * 			기존의 클래스를 이요하여 새로운 클래스를 생성할 수 있다.
 * 			재사용성
 * 캡슐화: 접근제어자(접근수정자, 접근제한자)(private, (default)=>괄호쓰는 이유: 아예 안쓰면 그게 디폴트여서 따로 디폴트라고 쓸 필요없음, protected, public) * 		
 * 다형성: 객체의 다형성.
 * 			참조변수의 형변환임.
 */
